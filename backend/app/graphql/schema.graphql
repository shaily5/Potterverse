type Book {
  author: String

  """
  Find a chapter by slug
  """
  chapter(chapterSlug: String!): Chapter

  """
  List all chapters
  """
  chapters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChapterConnection!
  cover: String
  dedication: String
  pages: Int
  releaseDate: ISO8601Date
  slug: String
  summary: String
  title: String
  wiki: String
}

"""
The connection type for Book.
"""
type BookConnection {
  """
  A list of edges.
  """
  edges: [BookEdge]

  """
  A list of nodes.
  """
  nodes: [Book]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total number of items returned from this connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BookEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Book
}

type Chapter {
  order: Int
  slug: String
  summary: String
  title: String
}

"""
The connection type for Chapter.
"""
type ChapterConnection {
  """
  A list of edges.
  """
  edges: [ChapterEdge]

  """
  A list of nodes.
  """
  nodes: [Chapter]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total number of items returned from this connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ChapterEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Chapter
}

type Character {
  aliasNames: [String!]
  animagus: String
  bloodStatus: String
  boggart: String
  born: String
  died: String
  eyeColor: String
  familyMembers: [String!]
  gender: String
  hairColor: String
  height: String
  house: String
  image: String
  jobs: [String!]
  maritalStatus: String
  name: String
  nationality: String
  patronus: String
  romances: [String!]
  skinColor: String
  slug: String!
  species: String
  titles: [String!]
  wands: [String!]
  weight: String
  wiki: String
}

"""
The connection type for Character.
"""
type CharacterConnection {
  """
  A list of edges.
  """
  edges: [CharacterEdge]

  """
  A list of nodes.
  """
  nodes: [Character]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total number of items returned from this connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CharacterEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Character
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

type Movie {
  boxOffice: String
  budget: String
  cinematographers: [String!]
  directors: [String!]
  distributors: [String!]
  editors: [String!]
  musicComposers: [String!]
  poster: String
  producers: [String!]
  rating: String
  releaseDate: ISO8601Date
  runningTime: String
  screenwriters: [String!]
  slug: String
  summary: String
  title: String
  trailer: String
  wiki: String
}

"""
The connection type for Movie.
"""
type MovieConnection {
  """
  A list of edges.
  """
  edges: [MovieEdge]

  """
  A list of nodes.
  """
  nodes: [Movie]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total number of items returned from this connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MovieEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Movie
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Potion {
  characteristics: String
  difficulty: String
  effect: String
  image: String
  ingredients: String
  inventors: String
  manufacturers: String
  name: String
  sideEffects: String
  slug: String
  time: String
  wiki: String
}

"""
The connection type for Potion.
"""
type PotionConnection {
  """
  A list of edges.
  """
  edges: [PotionEdge]

  """
  A list of nodes.
  """
  nodes: [Potion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total number of items returned from this connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PotionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Potion
}

type Query {
  """
  Find a book by slug
  """
  book(slug: String!): Book

  """
  List all books
  """
  books(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookConnection!

  """
  Find a character by slug
  """
  character(slug: String!): Character

  """
  List all characters
  """
  characters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CharacterConnection!

  """
  Find a movie by slug
  """
  movie(slug: String!): Movie

  """
  List all movies
  """
  movies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MovieConnection!

  """
  Find a potion by slug
  """
  potion(slug: String!): Potion

  """
  List all potions
  """
  potions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PotionConnection!

  """
  Find a spell by slug
  """
  spell(slug: String!): Spell

  """
  List all spells
  """
  spells(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SpellConnection!
}

type Spell {
  category: String
  creator: String
  effect: String
  hand: String
  image: String
  incantation: String
  light: String
  name: String
  slug: String
  wiki: String
}

"""
The connection type for Spell.
"""
type SpellConnection {
  """
  A list of edges.
  """
  edges: [SpellEdge]

  """
  A list of nodes.
  """
  nodes: [Spell]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total number of items returned from this connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SpellEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Spell
}
